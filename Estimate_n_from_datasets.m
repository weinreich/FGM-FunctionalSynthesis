% Program to estimate n and 95% CIs from real data. For each dataset I've
% included only the real estimates of theta. These are then converted to
% radians and then we cycle through a range of n's. Finally do K-S test.

clear all;

LunzerData = [75.0421 51.5717 60.8909 28.6972 36.1766 89.8188 86.1108 86.5407 61.5668 66.3651 23.8794 82.1024 46.52 39.996 55.4269 65.2855 63.2633 28.214 67.0314 71.3077 66.5933 44.4367 63.8951 40.895];

SanjuanData = [96.72678705 97.67739846 58.07164233 70.13071377 119.8352801 82.92707721 153.236093 113.9924574 75.99733768 81.42376186 66.96432136 107.6339601 83.68717323 64.63063397 118.1502026 145.9888707 82.28153128 63.97599438 75.93506369 92.91240536 28.59663473 77.28391469 113.3232849 144.5505105 101.8059932];

WeinreichData = [100.87 125.35 86.32 105.2 62.48 72.6 108.75 87.83 103.91];

TrindadeData = [145.5394888
117.8720739
131.2341536
150.3640181
110.0631189
127.620062
118.8149659
60.44259358
88.35590951
141.3664426
159.3138086
146.2891699
140.8983723
169.9545005
168.1221338
131.1882041
116.7963441
145.9213702
136.7685246
82.01688542
95.70292091
105.8281788
130.7477562
124.4865542
114.5683815
115.1289332
122.296433
106.1014781
135.3409551
112.566858
124.9605555
77.03168375
96.91245028
98.77783887
141.5176903
100.5708284
129.1279408
117.6233117
145.0632095
120.7143683
123.6661073
129.9915306
64.95446641
97.80274681
79.31060271
127.0701083
83.33337291
122.7490566
121.0031788
120.6681049
99.25221206
150.4027222
117.4491344
72.75376977
140.5364736
97.50260544
115.2902377
114.7354558
89.45430854
148.4118594
134.4047874
129.8651546
106.7667743
107.0066527
113.2784446
106.8550025
102.1295153
130.7360507
167.8107746
94.40770352
121.4174211
129.3295623
123.3129143
117.3775559
137.4014769
70.08383669
124.7159212
119.142652
126.8848803
148.8581118
20.39913857
70.66044872];
TrindadeData = TrindadeData';

LozovskyData = [141.7905142 102.565583 155.1451999 132.4311892];

deVisserData = [104.0686
109.7805
110.9004
110.9816
111.5169
112.7798
114.4778
116.1375
118.7239
122.6794
127.2162
130.627
130.7283
160.6543];
deVisserData = deVisserData';

LunzerBottomUpData = [25.45059981
63.30293496
68.34500103
76.47335514
67.18225756
74.88982642
65.46528889
66.84663491
69.67742408
80.99538905
75.89775426
77.86681468
108.6596766
100.5493011
106.2657004
68.88735503
68.13877213
68.2354192
68.64873429
66.70156809
68.28340866
75.85443707
64.25851601
74.90290659
70.46818936
74.28219467
70.76797326
78.24845681
68.36120723
75.06057038
103.4220602
68.53948594
69.07152976
75.30645129
76.98794742
68.55579359
86.55694
74.79538751
84.06482276
68.96009103
80.46630174
78.31041758
77.93089008
68.18356128
86.90158908
75.86310602
97.14489881
90.22770528
92.68388246
71.70291216
72.58774643
86.789843
86.94135131
76.70342081
88.36239648
75.76565629
99.29476321
84.41491444
96.82529543
76.13577873
71.41956899
89.84855657
89.27428841
74.9900242
94.33771869
68.13945068
66.80856589];

LunzerBottomUpData = LunzerBottomUpData';

ElenaData = [119.5766733
73.15363006
111.8592349
123.1872203
31.36180394
50.54769106
117.8682693
115.6376644
147.4872059
105.7601823
152.960024];

ElenaData = ElenaData';

% Data = [LunzerData,SanjuanData,WeinreichData,TrindadeData,LozovskyData,deVisserData];
Data = deVisserData;

figure(6)
hold on;

xvals=(10:20:180);
h = hist(Data,xvals);
sumn = sum(h);
h = h/sumn;

C = size(Data,2);

x = zeros(C,1);
p = zeros(C,1);

MAXp = -10000000000000000;
SUMp = 0;
MINn = 1;
MAXn = 70;
nSTEP = 0.05;
x = zeros((MAXn-MINn)/nSTEP,1);
p = zeros((MAXn-MINn)/nSTEP,1);
for i=1:(MAXn-MINn)/nSTEP
    x(i) = (i-1)*nSTEP + MINn;
    % Matrix needs to be transposed
    p(i) = ThetaLikelihood(x(i),(Data*pi/180.)');
    SUMp = SUMp + p(i);
    if p(i) > MAXp
        MAXp = p(i);
        CI(1) = x(i);
    end
end

lowflag = 0;
highflag = 0;
runningSUMp = 0;
for i=1:(MAXn-MINn)/nSTEP
    runningSUMp = runningSUMp + p(i);
    if ((runningSUMp/SUMp > 0.025) & (lowflag == 0))
        CI(2) = x(i);
        lowflag = 1;
    end
    if ((runningSUMp/SUMp > 0.975) & (highflag == 0))
        CI(3) = x(i);
        highflag = 1;
    end
end

% figure(2)
% plot(x,p)
CI

n = CI(1);
% ptheta = zeros(180,1);
% for i=1:180
%     ptheta(i) = (gamma(n/2)/(sqrt(pi)*gamma((n-1)/2)))*sin(i*pi/180.)^(n-2);
% end
% ptheta = ptheta * pi / 9.;
% plot(ptheta);

ptheta = zeros(9,1);
for i = 1:9
    ptheta(i) = (gamma(n/2)/(sqrt(pi)*gamma((n-1)/2)))*sin((10+(i-1)*20)*pi/180.)^(n-2);
    ptheta(i) = ptheta(i) * pi / 9.;
end
output = zeros(9,2);
output(:,1) = h;
output(:,2) = ptheta;
bar(xvals,output);

% Kolmogorov Smirnov is implemented in matlab in a way that accepts
% arbitrary null hypothesis so let's try that. I got sincdf() for Hartl and
% Taubes pdf from Mathematica. Matlab's ktest() wants a matrix with the CDF
% covering the whole range of observations.

for(i=1:181)
    null_cdf(i,1) = i-1;
    s = sincdf(i-1,n);
    if (s < 0)
        null_cdf(i,2) = 0;
    else
        null_cdf(i,2) = sincdf(i-1,n);
    end
end
[h0,p,ksstat,cv]=kstest(Data,null_cdf,0.05)
